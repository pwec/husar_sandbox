/* Auto-generated by genmsg_cpp for file /home/mateusz/ros/pmdCam/msg/image_box.msg */
#ifndef PMDCAM_MESSAGE_IMAGE_BOX_H
#define PMDCAM_MESSAGE_IMAGE_BOX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/Image.h"
#include "sensor_msgs/Image.h"
#include "sensor_msgs/Image.h"
#include "sensor_msgs/Image.h"

namespace pmdCam
{
template <class ContainerAllocator>
struct image_box_ {
  typedef image_box_<ContainerAllocator> Type;

  image_box_()
  : img1()
  , img2()
  , img3()
  , img4()
  {
  }

  image_box_(const ContainerAllocator& _alloc)
  : img1(_alloc)
  , img2(_alloc)
  , img3(_alloc)
  , img4(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _img1_type;
   ::sensor_msgs::Image_<ContainerAllocator>  img1;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _img2_type;
   ::sensor_msgs::Image_<ContainerAllocator>  img2;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _img3_type;
   ::sensor_msgs::Image_<ContainerAllocator>  img3;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _img4_type;
   ::sensor_msgs::Image_<ContainerAllocator>  img4;


private:
  static const char* __s_getDataType_() { return "pmdCam/image_box"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fbd3b500ad7f213eb88fab1e3233d49f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "sensor_msgs/Image img1\n\
sensor_msgs/Image img2\n\
sensor_msgs/Image img3\n\
sensor_msgs/Image img4\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, img1);
    ros::serialization::serialize(stream, img2);
    ros::serialization::serialize(stream, img3);
    ros::serialization::serialize(stream, img4);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, img1);
    ros::serialization::deserialize(stream, img2);
    ros::serialization::deserialize(stream, img3);
    ros::serialization::deserialize(stream, img4);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(img1);
    size += ros::serialization::serializationLength(img2);
    size += ros::serialization::serializationLength(img3);
    size += ros::serialization::serializationLength(img4);
    return size;
  }

  typedef boost::shared_ptr< ::pmdCam::image_box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pmdCam::image_box_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct image_box
typedef  ::pmdCam::image_box_<std::allocator<void> > image_box;

typedef boost::shared_ptr< ::pmdCam::image_box> image_boxPtr;
typedef boost::shared_ptr< ::pmdCam::image_box const> image_boxConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pmdCam::image_box_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pmdCam::image_box_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pmdCam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pmdCam::image_box_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pmdCam::image_box_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pmdCam::image_box_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fbd3b500ad7f213eb88fab1e3233d49f";
  }

  static const char* value(const  ::pmdCam::image_box_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfbd3b500ad7f213eULL;
  static const uint64_t static_value2 = 0xb88fab1e3233d49fULL;
};

template<class ContainerAllocator>
struct DataType< ::pmdCam::image_box_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pmdCam/image_box";
  }

  static const char* value(const  ::pmdCam::image_box_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pmdCam::image_box_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Image img1\n\
sensor_msgs/Image img2\n\
sensor_msgs/Image img3\n\
sensor_msgs/Image img4\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::pmdCam::image_box_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pmdCam::image_box_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.img1);
    stream.next(m.img2);
    stream.next(m.img3);
    stream.next(m.img4);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct image_box_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pmdCam::image_box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pmdCam::image_box_<ContainerAllocator> & v) 
  {
    s << indent << "img1: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.img1);
    s << indent << "img2: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.img2);
    s << indent << "img3: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.img3);
    s << indent << "img4: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.img4);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PMDCAM_MESSAGE_IMAGE_BOX_H

