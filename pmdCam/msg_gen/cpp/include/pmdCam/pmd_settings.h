/* Auto-generated by genmsg_cpp for file /home/mateusz/ros/pmdCam/msg/pmd_settings.msg */
#ifndef PMDCAM_MESSAGE_PMD_SETTINGS_H
#define PMDCAM_MESSAGE_PMD_SETTINGS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pmdCam
{
template <class ContainerAllocator>
struct pmd_settings_ {
  typedef pmd_settings_<ContainerAllocator> Type;

  pmd_settings_()
  : ifm_time(0.0)
  , modulation_frequency(0)
  , illu_mode(0)
  , reset_duration(0)
  , median_filter(false)
  , mean_filter(false)
  , trigger_mode(0)
  , sampling_mode(0)
  , integration_time_single(0)
  , integration_time_double(0)
  , delay_time(0)
  , unambiguous_range(0.0)
  , evaluation_time(0.0)
  , data_port(0)
  , ip()
  , xml_port(0)
  {
  }

  pmd_settings_(const ContainerAllocator& _alloc)
  : ifm_time(0.0)
  , modulation_frequency(0)
  , illu_mode(0)
  , reset_duration(0)
  , median_filter(false)
  , mean_filter(false)
  , trigger_mode(0)
  , sampling_mode(0)
  , integration_time_single(0)
  , integration_time_double(0)
  , delay_time(0)
  , unambiguous_range(0.0)
  , evaluation_time(0.0)
  , data_port(0)
  , ip(_alloc)
  , xml_port(0)
  {
  }

  typedef float _ifm_time_type;
  float ifm_time;

  typedef int64_t _modulation_frequency_type;
  int64_t modulation_frequency;

  typedef int64_t _illu_mode_type;
  int64_t illu_mode;

  typedef int64_t _reset_duration_type;
  int64_t reset_duration;

  typedef uint8_t _median_filter_type;
  uint8_t median_filter;

  typedef uint8_t _mean_filter_type;
  uint8_t mean_filter;

  typedef int64_t _trigger_mode_type;
  int64_t trigger_mode;

  typedef int64_t _sampling_mode_type;
  int64_t sampling_mode;

  typedef int64_t _integration_time_single_type;
  int64_t integration_time_single;

  typedef int64_t _integration_time_double_type;
  int64_t integration_time_double;

  typedef int64_t _delay_time_type;
  int64_t delay_time;

  typedef float _unambiguous_range_type;
  float unambiguous_range;

  typedef float _evaluation_time_type;
  float evaluation_time;

  typedef int64_t _data_port_type;
  int64_t data_port;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ip;

  typedef int64_t _xml_port_type;
  int64_t xml_port;


private:
  static const char* __s_getDataType_() { return "pmdCam/pmd_settings"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "54f29591c8c2bec4e19f7c643b221d48"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 ifm_time\n\
int64 modulation_frequency\n\
int64 illu_mode\n\
int64 reset_duration\n\
bool median_filter\n\
bool mean_filter\n\
int64 trigger_mode\n\
int64 sampling_mode\n\
int64 integration_time_single\n\
int64 integration_time_double\n\
int64 delay_time\n\
float32 unambiguous_range\n\
float32 evaluation_time\n\
int64 data_port\n\
string ip\n\
int64 xml_port\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, ifm_time);
    ros::serialization::serialize(stream, modulation_frequency);
    ros::serialization::serialize(stream, illu_mode);
    ros::serialization::serialize(stream, reset_duration);
    ros::serialization::serialize(stream, median_filter);
    ros::serialization::serialize(stream, mean_filter);
    ros::serialization::serialize(stream, trigger_mode);
    ros::serialization::serialize(stream, sampling_mode);
    ros::serialization::serialize(stream, integration_time_single);
    ros::serialization::serialize(stream, integration_time_double);
    ros::serialization::serialize(stream, delay_time);
    ros::serialization::serialize(stream, unambiguous_range);
    ros::serialization::serialize(stream, evaluation_time);
    ros::serialization::serialize(stream, data_port);
    ros::serialization::serialize(stream, ip);
    ros::serialization::serialize(stream, xml_port);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, ifm_time);
    ros::serialization::deserialize(stream, modulation_frequency);
    ros::serialization::deserialize(stream, illu_mode);
    ros::serialization::deserialize(stream, reset_duration);
    ros::serialization::deserialize(stream, median_filter);
    ros::serialization::deserialize(stream, mean_filter);
    ros::serialization::deserialize(stream, trigger_mode);
    ros::serialization::deserialize(stream, sampling_mode);
    ros::serialization::deserialize(stream, integration_time_single);
    ros::serialization::deserialize(stream, integration_time_double);
    ros::serialization::deserialize(stream, delay_time);
    ros::serialization::deserialize(stream, unambiguous_range);
    ros::serialization::deserialize(stream, evaluation_time);
    ros::serialization::deserialize(stream, data_port);
    ros::serialization::deserialize(stream, ip);
    ros::serialization::deserialize(stream, xml_port);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(ifm_time);
    size += ros::serialization::serializationLength(modulation_frequency);
    size += ros::serialization::serializationLength(illu_mode);
    size += ros::serialization::serializationLength(reset_duration);
    size += ros::serialization::serializationLength(median_filter);
    size += ros::serialization::serializationLength(mean_filter);
    size += ros::serialization::serializationLength(trigger_mode);
    size += ros::serialization::serializationLength(sampling_mode);
    size += ros::serialization::serializationLength(integration_time_single);
    size += ros::serialization::serializationLength(integration_time_double);
    size += ros::serialization::serializationLength(delay_time);
    size += ros::serialization::serializationLength(unambiguous_range);
    size += ros::serialization::serializationLength(evaluation_time);
    size += ros::serialization::serializationLength(data_port);
    size += ros::serialization::serializationLength(ip);
    size += ros::serialization::serializationLength(xml_port);
    return size;
  }

  typedef boost::shared_ptr< ::pmdCam::pmd_settings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pmdCam::pmd_settings_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pmd_settings
typedef  ::pmdCam::pmd_settings_<std::allocator<void> > pmd_settings;

typedef boost::shared_ptr< ::pmdCam::pmd_settings> pmd_settingsPtr;
typedef boost::shared_ptr< ::pmdCam::pmd_settings const> pmd_settingsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pmdCam::pmd_settings_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pmdCam::pmd_settings_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pmdCam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pmdCam::pmd_settings_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pmdCam::pmd_settings_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pmdCam::pmd_settings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "54f29591c8c2bec4e19f7c643b221d48";
  }

  static const char* value(const  ::pmdCam::pmd_settings_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x54f29591c8c2bec4ULL;
  static const uint64_t static_value2 = 0xe19f7c643b221d48ULL;
};

template<class ContainerAllocator>
struct DataType< ::pmdCam::pmd_settings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pmdCam/pmd_settings";
  }

  static const char* value(const  ::pmdCam::pmd_settings_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pmdCam::pmd_settings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 ifm_time\n\
int64 modulation_frequency\n\
int64 illu_mode\n\
int64 reset_duration\n\
bool median_filter\n\
bool mean_filter\n\
int64 trigger_mode\n\
int64 sampling_mode\n\
int64 integration_time_single\n\
int64 integration_time_double\n\
int64 delay_time\n\
float32 unambiguous_range\n\
float32 evaluation_time\n\
int64 data_port\n\
string ip\n\
int64 xml_port\n\
\n\
\n\
";
  }

  static const char* value(const  ::pmdCam::pmd_settings_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pmdCam::pmd_settings_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ifm_time);
    stream.next(m.modulation_frequency);
    stream.next(m.illu_mode);
    stream.next(m.reset_duration);
    stream.next(m.median_filter);
    stream.next(m.mean_filter);
    stream.next(m.trigger_mode);
    stream.next(m.sampling_mode);
    stream.next(m.integration_time_single);
    stream.next(m.integration_time_double);
    stream.next(m.delay_time);
    stream.next(m.unambiguous_range);
    stream.next(m.evaluation_time);
    stream.next(m.data_port);
    stream.next(m.ip);
    stream.next(m.xml_port);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pmd_settings_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pmdCam::pmd_settings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pmdCam::pmd_settings_<ContainerAllocator> & v) 
  {
    s << indent << "ifm_time: ";
    Printer<float>::stream(s, indent + "  ", v.ifm_time);
    s << indent << "modulation_frequency: ";
    Printer<int64_t>::stream(s, indent + "  ", v.modulation_frequency);
    s << indent << "illu_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.illu_mode);
    s << indent << "reset_duration: ";
    Printer<int64_t>::stream(s, indent + "  ", v.reset_duration);
    s << indent << "median_filter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.median_filter);
    s << indent << "mean_filter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mean_filter);
    s << indent << "trigger_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.trigger_mode);
    s << indent << "sampling_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.sampling_mode);
    s << indent << "integration_time_single: ";
    Printer<int64_t>::stream(s, indent + "  ", v.integration_time_single);
    s << indent << "integration_time_double: ";
    Printer<int64_t>::stream(s, indent + "  ", v.integration_time_double);
    s << indent << "delay_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.delay_time);
    s << indent << "unambiguous_range: ";
    Printer<float>::stream(s, indent + "  ", v.unambiguous_range);
    s << indent << "evaluation_time: ";
    Printer<float>::stream(s, indent + "  ", v.evaluation_time);
    s << indent << "data_port: ";
    Printer<int64_t>::stream(s, indent + "  ", v.data_port);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "xml_port: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xml_port);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PMDCAM_MESSAGE_PMD_SETTINGS_H

