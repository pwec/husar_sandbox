/* Auto-generated by genmsg_cpp for file /home/mateusz/ros/pmdCam/msg/data_flow.msg */
#ifndef PMDCAM_MESSAGE_DATA_FLOW_H
#define PMDCAM_MESSAGE_DATA_FLOW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pmdCam
{
template <class ContainerAllocator>
struct data_flow_ {
  typedef data_flow_<ContainerAllocator> Type;

  data_flow_()
  : calibration_in_progress(false)
  , accept_last_pair(false)
  , perform_calibration(false)
  {
  }

  data_flow_(const ContainerAllocator& _alloc)
  : calibration_in_progress(false)
  , accept_last_pair(false)
  , perform_calibration(false)
  {
  }

  typedef uint8_t _calibration_in_progress_type;
  uint8_t calibration_in_progress;

  typedef uint8_t _accept_last_pair_type;
  uint8_t accept_last_pair;

  typedef uint8_t _perform_calibration_type;
  uint8_t perform_calibration;


private:
  static const char* __s_getDataType_() { return "pmdCam/data_flow"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "bfe76f62bc51cb5839a65353a5344d08"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool calibration_in_progress\n\
bool accept_last_pair\n\
bool perform_calibration\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, calibration_in_progress);
    ros::serialization::serialize(stream, accept_last_pair);
    ros::serialization::serialize(stream, perform_calibration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, calibration_in_progress);
    ros::serialization::deserialize(stream, accept_last_pair);
    ros::serialization::deserialize(stream, perform_calibration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(calibration_in_progress);
    size += ros::serialization::serializationLength(accept_last_pair);
    size += ros::serialization::serializationLength(perform_calibration);
    return size;
  }

  typedef boost::shared_ptr< ::pmdCam::data_flow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pmdCam::data_flow_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct data_flow
typedef  ::pmdCam::data_flow_<std::allocator<void> > data_flow;

typedef boost::shared_ptr< ::pmdCam::data_flow> data_flowPtr;
typedef boost::shared_ptr< ::pmdCam::data_flow const> data_flowConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pmdCam::data_flow_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pmdCam::data_flow_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pmdCam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pmdCam::data_flow_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pmdCam::data_flow_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pmdCam::data_flow_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bfe76f62bc51cb5839a65353a5344d08";
  }

  static const char* value(const  ::pmdCam::data_flow_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbfe76f62bc51cb58ULL;
  static const uint64_t static_value2 = 0x39a65353a5344d08ULL;
};

template<class ContainerAllocator>
struct DataType< ::pmdCam::data_flow_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pmdCam/data_flow";
  }

  static const char* value(const  ::pmdCam::data_flow_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pmdCam::data_flow_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool calibration_in_progress\n\
bool accept_last_pair\n\
bool perform_calibration\n\
\n\
";
  }

  static const char* value(const  ::pmdCam::data_flow_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pmdCam::data_flow_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pmdCam::data_flow_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.calibration_in_progress);
    stream.next(m.accept_last_pair);
    stream.next(m.perform_calibration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct data_flow_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pmdCam::data_flow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pmdCam::data_flow_<ContainerAllocator> & v) 
  {
    s << indent << "calibration_in_progress: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibration_in_progress);
    s << indent << "accept_last_pair: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accept_last_pair);
    s << indent << "perform_calibration: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.perform_calibration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PMDCAM_MESSAGE_DATA_FLOW_H

