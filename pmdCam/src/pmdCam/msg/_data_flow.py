"""autogenerated by genmsg_py from data_flow.msg. Do not edit."""
import roslib.message
import struct


class data_flow(roslib.message.Message):
  _md5sum = "bfe76f62bc51cb5839a65353a5344d08"
  _type = "pmdCam/data_flow"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool calibration_in_progress
bool accept_last_pair
bool perform_calibration

"""
  __slots__ = ['calibration_in_progress','accept_last_pair','perform_calibration']
  _slot_types = ['bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       calibration_in_progress,accept_last_pair,perform_calibration
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(data_flow, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.calibration_in_progress is None:
        self.calibration_in_progress = False
      if self.accept_last_pair is None:
        self.accept_last_pair = False
      if self.perform_calibration is None:
        self.perform_calibration = False
    else:
      self.calibration_in_progress = False
      self.accept_last_pair = False
      self.perform_calibration = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.calibration_in_progress, _x.accept_last_pair, _x.perform_calibration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.calibration_in_progress, _x.accept_last_pair, _x.perform_calibration,) = _struct_3B.unpack(str[start:end])
      self.calibration_in_progress = bool(self.calibration_in_progress)
      self.accept_last_pair = bool(self.accept_last_pair)
      self.perform_calibration = bool(self.perform_calibration)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.calibration_in_progress, _x.accept_last_pair, _x.perform_calibration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.calibration_in_progress, _x.accept_last_pair, _x.perform_calibration,) = _struct_3B.unpack(str[start:end])
      self.calibration_in_progress = bool(self.calibration_in_progress)
      self.accept_last_pair = bool(self.accept_last_pair)
      self.perform_calibration = bool(self.perform_calibration)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3B = struct.Struct("<3B")
